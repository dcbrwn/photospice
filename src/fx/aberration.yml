name: Chromatic Aberration
uniforms:
  - name: Force
    id: uForce
    type: float
    max: 1.0
    default: 0.5
  - name: Color Shift
    id: uColorShift
    type: vec2
    components:
      - max: 4
      - max: 4
    default: [1.5, 0.5]
shader: |
  precision lowp float;

  varying vec2 vUv;
  uniform sampler2D uImage;
  uniform float uAmount;
  uniform float uDirection;
  uniform float uForce;
  uniform vec2 uColorShift;
  uniform vec2 iCanvasResolution;
  uniform vec2 iImageResolution;

  #define SAMPLES 25.0

  float inBounds(vec2 p, vec2 bounds) {
    if (p.x > 0.0 && p.y > 0.0 && p.x < bounds.x && p.y < bounds.y) {
      return 1.0;
    }
    return 0.0;
  }

  vec4 radialBlur(vec2 p, float force) {
    vec2 size = iImageResolution / iCanvasResolution;
    vec4 sum = vec4(0.0);
    vec2 dir = (vec2(size * 0.5) - p) * force;
    vec4 total = vec4(0.0);
    for (float i = -1.0; i < 1.0; i += 2.0 / SAMPLES) {
      vec2 shift = dir * i;
      vec2 vGA = p + shift;
      vec2 vR = p + shift * uColorShift.x;
      vec2 vB = p + shift * uColorShift.y;
      if (inBounds(vGA, size) == 1.0) {
        sum.ga += texture2D(uImage, vGA).ga;
        total.ga += 1.0;
      }
      if (inBounds(vR, size) == 1.0) {
        sum.r += texture2D(uImage, vR).r;
        total.r += 1.0;
      }
      if (inBounds(vB, size) == 1.0) {
        sum.b += texture2D(uImage, vB).b;
        total.b += 1.0;
      }
    }
    return sum / total;
  }

  void main() {
    gl_FragColor = radialBlur(vUv, length(vUv - 0.5) * uForce);
  }
